// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  username      String?        @unique
  firstName     String?
  lastName      String?
  password      String?
  image         String?
  userStatus    String
  uerPermissions UserPermission[]
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  accounts      Account[]
  userRoles     UserRole[]
  userServices  UserService[]
  auditLogs     Json[]
}

model Account {
  id                String    @id @default(uuid())
  provider          String
  providerAccountId String    @unique
  providerUserName  String?
  providerImage     String?
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?
  user              User      @relation(fields: [userId], references: [id])
  auditLogs     Json[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  userRoles   UserRole[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  deletedAt   DateTime?
  auditLogs     Json[]
}

model Permission {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  rolePermissions   RolePermission[]
  ServicePermission ServicePermission[]
  userPermissions   UserPermission[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  deletedAt         DateTime?
  auditLogs     Json[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
  @@unique([userId, permissionId])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
  @@unique([userId, roleId])
}

model Service {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  public             Boolean             @default(false)
  image              String?
  microServicesUrl   String[]            @default([])
  apiKeys            ServiceApiKey[]
  publicKeys         String
  servicePermissions ServicePermission[]
  userServices       UserService[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
}

model ServiceApiKey {
  id        String    @id @default(uuid())
  serviceId String
  apiKey    String    @unique
  expiresAt DateTime?
  service   Service   @relation(fields: [serviceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
}

model ServicePermission {
  id           String     @id @default(uuid())
  serviceId    String
  permissionId String
  service      Service    @relation(fields: [serviceId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  deletedAt    DateTime?
  auditLogs     Json[]
  @@unique([serviceId, permissionId])
}

model UserService {
  id        String  @id @default(uuid())
  userId    String
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  auditLogs     Json[]
  @@unique([userId, serviceId])
}
