// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// โมเดลสำหรับข้อมูลผู้ใช้
model User {
  id            String         @id @default(uuid())
  username      String         @unique
  firstName     String?
  lastName      String?
  image         String?
  email         String         @unique
  createdAt     DateTime       @default(now())
  deletedAt     DateTime?
  accounts      Account[]
  userRoles     UserRole[]
  userServices  UserService[]
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]
}

// โมเดลสำหรับข้อมูลบัญชีผู้ใช้ที่เชื่อมโยงกับ Provider ภายนอก
model Account {
  id                String    @id @default(uuid())
  provider          String
  providerAccountId String    @unique
  userId            String    @unique
  deletedAt         DateTime?
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, userId])
}

// โมเดลสำหรับบทบาทของผู้ใช้
model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  deletedAt   DateTime?
  permissions RolePermission[]
  userRoles   UserRole[]
}

model Permission {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  deletedAt         DateTime?
  rolePermissions   RolePermission[]
  ServicePermission ServicePermission[]
}

// โมเดลสำหรับความสัมพันธ์ระหว่างบทบาทและสิทธิ์
model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  deletedAt    DateTime?
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// โมเดลสำหรับกำหนดบทบาทให้กับผู้ใช้
model UserRole {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

// โมเดลสำหรับบริการ (Services) ที่ผู้ใช้สามารถเข้าถึงได้
model Service {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  public             Boolean             @default(false)
  deletedAt          DateTime?
  apiKeys            ServiceApiKey[]
  servicePermissions ServicePermission[]
  userServices       UserService[]
}

// โมเดลสำหรับ API Key ของแต่ละบริการ
model ServiceApiKey {
  id        String    @id @default(uuid())
  serviceId String
  apiKey    String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  service   Service   @relation(fields: [serviceId], references: [id])
}

// โมเดลสำหรับการกำหนดสิทธิ์ของแต่ละบริการ
model ServicePermission {
  id           String     @id @default(uuid())
  serviceId    String
  permissionId String
  service      Service    @relation(fields: [serviceId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([serviceId, permissionId])
}

// โมเดลสำหรับกำหนดความสัมพันธ์ระหว่างผู้ใช้กับบริการ
model UserService {
  id        String  @id @default(uuid())
  userId    String
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId])
}

// โมเดลสำหรับเก็บ Refresh Token ของผู้ใช้
model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  issuedAt  DateTime  @default(now())
  expiresAt DateTime
  deletedAt DateTime? // สำหรับ soft delete
  user      User      @relation(fields: [userId], references: [id])
}

// โมเดลสำหรับบันทึกกิจกรรม (Audit Logs) ของผู้ใช้ เช่น การเข้าสู่ระบบ การใช้ Token
model AuditLog {
  id        String    @id @default(uuid())
  userId    String
  action    String // เช่น "LOGIN", "LOGOUT", "TOKEN_REFRESH"
  timestamp DateTime  @default(now())
  ipAddress String?
  userAgent String?
  deletedAt DateTime? // สำหรับ soft delete
  user      User      @relation(fields: [userId], references: [id])
}
